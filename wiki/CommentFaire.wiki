#summary Comment faire pour utiliser jndi-resources
#labels jndi
= Comment faire ? =

Les projets doivent enrichir la description des ressources dont ils ont besoin, permettant une génération des différents fichiers de configuration des serveurs d'applications. Ainsi, il sera possible d'installer les composants partout, sans exprimer autre-chose que des besoins en terme de ressources.

Par exemple, si un composant désire une source de données de type Oracle, il l'indique dans un fichier XML spécifique, et c'est tout. Les utilitaires se chargent d'installer tous les fichiers, les drivers, etc. pour permettre au composant d'être installé dans tous les serveurs d'applications.

Pour cela, l'application doit respecter rigoureusement les spécifications JEE pour la gestion des paramètres de déploiement. Il faut utiliser systématiquement les ressources JNDI pour tous les paramètres de déploiement.

Pour mémoire, le tableau « Clef JNDI standard J2EE » reprend les conventions JEE.

|| *Clef JNDI* || *Type* || *Exemple* ||
|| `java:comp/env/ejb/*` || `javax.ejb.EJBObject` || Les EJBs s'il y en a. ||
|| [jdbc `java:comp/env/jdbc/*`] || `javax.sql.DataSource` || Une source de données SQL avec nom d'utilisateur et mot de passe. ||
|| [jms `java:comp/env/jms/*`] || `javax.jms.ConnectionFactory`, `javax.jms.XAConnectionFactory`, `javax.jms.Queue`, `javax.jms.Topic` || Une source de queue JMS avec nom d'utilisateur et mot de passe. ||
|| [mail `java:comp/env/mail/*`] || `javax.mail.Session`, `javax.mail.Address`, `javax.mail.internet.InternetAddress` || Un serveur SMTP, IMAP4 ou POP3 ; Une adresse courriel.||
|| [url `java:comp/env/url/*`] || `java.net.URL` || Un répertoire partagé ; Une branche FTP ; Une requête de PING vers un serveur HTTP.||
|| [url `java:comp/env/services/*`] || `javax.xml.ws.Service` || Une référence à un service Web.||
|| `java:comp/env/eis/*` || `javax.resource.cci.ConnectionFactory`, `javax.resource.Referenceable` || Pour les ressources JCA||
|| `java:comp/UserTransaction` || `javax.transaction.UserTransaction` || Clef spéciale permettant d'avoir un accès au contexte transactionnel.||

D'autres clefs sont parfois utiles, même s'il n'existe pas de conventions pour cela.
|| *Clef JNDI* || *Type* || *Exemple* ||
|| [jndi `java:comp/env/jndi/*`] || `javax.naming.Context` || Pour d'autres branches JNDI ou LDAP 1, vers des serveurs JNDI distant par exemple.||
|| [host `java:comp/env/host/*`] || `java.net.InetAddress` || Le nom d'un DNS d'une machine ou d'une grappe (plusieurs IP pour le même nom), ou bien directement l'adresse IP mais ce n'est pas conseillé.||
|| `java:comp/env/etc/*` || `java.lang.Object` || Autres ressources non prévues pour le moment dans ces spécifications.||

Il faut ensuite décrire les exigences sur les ressources dans un fichier [jndiResourcesXML `jndi-resources.xml`] et le placer éventuellement dans le répertoire `META-INF` ou bien en dehors de l'archive.

Un premier utilitaire permet alors, à partir de [ModelesTransformations modèles de conversions], de générer tous les fichiers de paramètres pour [ModelesTransformations différents serveurs d'applications], permettant la publication de ressources répondant aux exigences de l'application. Ces fichiers sont [Variables partiellement] valorisés, car à cette étape, il n'est pas encore nécessaire d'indiquer les noms des machines et autres paramètres de déploiement. Seuls les modèles de fichiers sont nécessaires.

Tous les modèles de déploiement peuvent alors être distribués sur différentes plate-formes d'accueil.

Un deuxième utilitaire se charge d'exploiter ces modèles de déploiement pour une installation effective sur un ou plusieurs serveurs d'applications cibles, pas nécessairement de la même marque ou de la même version. Des fichiers de [Variables propriétés] permettent alors d'indiquer les éléments spécifiques à la plate-forme d'accueil (les adresses des bases de données, les mots de passe, etc).

Si nécessaire, ces deux étapes peuvent être regroupées en une seule, afin de partir du fichier des exigences de ressources à une installation directe sur les serveurs d'applications.

Suite : [Familles Familles de ressources]