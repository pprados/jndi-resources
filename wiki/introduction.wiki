#summary Introduction à l'outil jndi-resources

= Introduction =

Les composants JEE ne doivent pas dépendre d'une architecture de déploiement, ni avoir connaissance des localisations des différentes ressources qu'ils utilisent. Ils doivent être indépendants du type de la base de donnée, de sa localisation, de l'utilisation d'un annuaire [architecture JNDI localisé ou centralisé], du [transformations type] de serveur d'applications d'accueil (JBoss, Tomcat ou autre), etc.

Les [http://java.sun.com/j2ee/j2ee-1_4-fr-spec.pdf spécifications] JEE offrent pour cela une norme de packaging (WAR et EAR) et une technologie : [architecture JNDI]. Il s'agit d'une base de données hiérarchiques d'objets.
Les composants doivent indiquer les ressources dont ils ont besoins ; une [jdbc source de données], une queue [jms JMS], un serveur de [mail], une [url], un [jdbc annuaire], etc. Le serveur d'applications doit être paramétré pour offrir les ressources nécessaires au composant.

Mais, comme le paramétrage de ces ressources n'est pas normalisé, chaque serveur utilise une approche qui lui est propre. Il faut alors écrire des scripts d'installations spécifique à chaque serveur, voir à chaque version de chaque serveur. Sinon, le composant JEE ne fonctionne pas, en l'absence des ressources nécessaires.

Les fichiers `web.xml` et `application.xml` permettent d'indiquer les ressources nécessaires aux composants. Il est possible d'indiquer une clef JNDI locale au composant et une classe Java. Le serveur doit alimenter les clefs avec des objets répondants aux classes.
{{{
...
<resource-ref>
   <description>La base de donnée</description>
   <res-ref-name>jdbc/Default</res-ref-name>
   <res-type>javax.sql.DataSource</res-type>
   <res-auth>Application</res-auth>
   <res-sharing-scope>Shareable</res-sharing-scope>
</resource-ref>
...
}}}

Dans le monde réel, les exigences des projets sont plus complexes. En effet, le composant doit préciser qu'il désire une source de donnée de type Oracle, un pool de connexion de telle taille, etc. Mais, il n'a pas besoin d'indiquer l'utilisateur et le mot de passe à utiliser. Ces informations sont du ressort de l'assembleur de composants, comme décrit dans les spécifications JEE.

Pour combler ces lacunes, des fichiers README indiquent généralement comment paramétrer chaque ressource. Souvent, cela exige une intervention manuelle. Ou bien, des scripts d'installations sont proposés, mais limités à certains serveurs, certaines versions ou à certaines architectures. Ils interviennent si profondément, qu'il n'est plus possible d'installer plusieurs composants sur le même serveur. Le 's' de serveur d'applications est alors inutile. Chaque serveur ne gère qu'une seule application.

Vingt-cinq à quarante pour-cent du temps consacré aux déploiements des composants est perdu à corriger des problèmes de paramètres. Dans un _cluster_, souvent un serveur fonctionne mais pas l'autre. Où est l'erreur ?

Alors que les salles informatiques cherchent à rationaliser les ressources (pour des raisons écologiques, financières, surface au sol, limite électrique), il est difficile de le faire, à cause d'une adhérence trop forte entre les composants et les serveurs d'applications.

Nous proposons de traiter ce problème, afin d'améliorer et d'uniformiser les installations des composants, par un paramétrage simplifié des différents serveurs d'applications.

Les bénéfices attendus de la démarche sont les suivants :
 * Possibilité de mutualiser les ressources au niveau serveurs d'applications, instances de serveurs d'applications ou machines virtuelles ;
 * Normalisation de l'installation des composants, quelques soit le serveur d'applications ;
 * Indépendance des composants vis-à-vis des serveurs d'applications ;
 * Migration immédiate d'un serveur à un autre ou d'une version à la suivante ;
 * Normalisation de l'utilisation des ressources de l'entreprise ;
 * Qualifications des paramètres de déploiements ;

Suite : [aQuoiCelaSert  A quoi cela sert ?]